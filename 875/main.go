package main

import (
	"fmt"
	"math"
)

func main() {
	fmt.Println(minEatingSpeed([]int{30, 11, 23, 4, 20}, 6))
}

func minEatingSpeed(piles []int, h int) int {
	max := 0

	// Находим сначала максимальную кучу бананов в piles
	for _, i := range piles {
		if i > max {
			max = i
		}
	}

	// Исопльзуем 2 указателя и ищем оптимальное количество бананов, которые может съесть коко за час
	// правым указателем будет максимальная куча бананов, а левый у нас 1, так нужно есть бананы при 0 не получится
	left, right := 1, max

	// Начинаем поиск оптимального числа бананов
	for left <= right {
		// Вычисляем скорость, с которой нужно есть бананы
		speed := left + (right-left)/2
		// Определяем общее время, за которой можно будет съесть бананы с определенной скоростью
		totalTime := 0

		// Проходимся по массиву с кучами бананов
		for _, i := range piles {
			// нам нужно округлять результат в большую сторону по условию задачи
			totalTime += int(math.Ceil(float64(i) / float64(speed)))
		}

		// Делаем проверки, сравнивая totaltime с h и записываем результат в max
		if totalTime <= h {
			// Если удалось съесть бананы за меньшее или такое же время как h
			// то мы этот результат записываем в max
			max = speed
			// Так как нам нужно найти количество часов которое ближе всего к h,
			// то мы двигаем правую часть, потому что справа самая большая скорость
			right = speed - 1
		} else {
			left = speed + 1
		}

	}

	return max
}
