package main

import "fmt"

func main() {
	fmt.Println(findMin([]int{4, 5, 6, 7, 0, 1, 2}))
}

func findMin(nums []int) int {
	// Сначала определим переменную с минимум и укажем значение первого элемента
	min := nums[0]

	// Используем 2 указателя для поиска значения в срезе
	left, right := 0, len(nums)-1
	for left <= right {
		mid := left + (right-left)/2

		// Проверяем значение по индексу mid и сравниваем его с min
		if nums[mid] < min {
			min = nums[mid]
		}

		// Делаем еще одну проверку, теперь мы проверяем значение по левому индексу
		// Если оно меньше чем min, то мы его присваиваем min
		if nums[left] < min {
			min = nums[left]
		}

		// Теперь делаем проверки в сдвинутом (rotated) срезе, сначала проверяем
		// Если слева от среднее значения, находятся значения, которые меньше или равны среднему
		// значит слева идут значения в порядке возрастания и там нет перепада максимального значения в срезе
		// с минимальным. Например 7 0 1.
		// В таком случае мы ищим этот перепад в другой части в правой
		if nums[left] <= nums[mid] {
			left = mid + 1
			// Если же у нас оказались слева значения больше чем по середине, значит здесь был срез сдвинут
			// И нам нужно проверить его в этой части слева
		} else {
			right = mid - 1
		}
	}
	return min
}
